<?php
/**
 * Plugin Name: Codegrabber: Weather
 * Plugin URI:
 * Description: This widget displays the information about weather.
 * Version: 1.0
 * Author: codegrabber
 * Author URI: https://codegrabber.blogspot.com/
 *
 */
/* ===================
 * Add function to widgets_init that'll load our widget.
 =================== */
add_action( 'widgets_init', 'codegrabber_weather_widgets' );

function codegrabber_weather_widgets() {
	register_widget( 'codegrabber_weather_widget' );
}
/* ===================
 * This class handles everything that needs to be handled with the widget:
 * the settings, form, display, and update.  Nice!
 =================== */
class codegrabber_weather_widget extends WP_Widget{
	/* ===================
	 * Widget setup.
	 =================== */
	function __construct( ) {
		$widget_ops = array( 'classname' => 'f_widget', 'description' => __( 'Displays the weather in the sidebar.', 'codegrabber' ) );
		parent::__construct( 'codegrabber_weather_widget', __( 'Codegrabber: Weather', 'codegrabber' ), $widget_ops );
	}
	/* ===================
	 * display the widget on the screen.
	 =================== */
	public function widget( $args, $instance ) {
		parent::widget( $args, $instance ); // TODO: Change the autogenerated stub
	}
	/* ===================
	 * @param array $new_instance
	 * @param array $old_instance
	 * update widget settings.
	 * @return array
	 =================== */
	public function update( $new_instance, $old_instance ) {
		return parent::update( $new_instance, $old_instance ); // TODO: Change the autogenerated stub
	}
	/* ===================
	 * @param array $instance
	 * Displays the widget settings controls on the widget panel.
	 * Make use of the get_field_id() and get_field_name() function
	 * when creating your form elements. This handles the confusing stuff.
	 * @return string
	=================== */
	public function form( $instance ) {
		return parent::form( $instance ); // TODO: Change the autogenerated stub
	}
}